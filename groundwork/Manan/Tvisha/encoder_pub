#include <Wire.h>
#include <ros.h>
#include <std_msgs/Float32MultiArray.h>

// I2C address for the AS5600 encoders (both encoders share the same address)
#define AS5600_ADDR 0x36

// Create Two I2C Buses
TwoWire I2C_1 = TwoWire(0);  // I2C_1 on Wire(0)
TwoWire I2C_2 = TwoWire(1);  // I2C_2 on Wire(1)

// ROS NodeHandle and Publisher
ros::NodeHandle nh;
std_msgs::Float32MultiArray encoder_angles;
float encoder_data[2];
ros::Publisher encoder_pub("encoder_angles", &encoder_angles);

void setup() {
  Serial.begin(57600);

  // Initialize I2C_1 (Encoder 1) on GPIO 21 (SDA) and GPIO 22 (SCL)
  I2C_1.begin(21, 22);

  // Initialize I2C_2 (Encoder 2) on GPIO 19 (SDA) and GPIO 18 (SCL)
  I2C_2.begin(19, 18);

  // Initialize ROS node
  nh.initNode();
  nh.advertise(encoder_pub);

  // Prepare the ROS message array
  encoder_angles.data_length = 2;  // Two encoders
  encoder_angles.data = encoder_data;

  Serial.println("I2C buses and ROS node initialized.");
}

uint16_t readAS5600Angle(TwoWire &i2c) {
  i2c.beginTransmission(AS5600_ADDR);
  i2c.write(0x0C);  // Address for raw angle register
  if (i2c.endTransmission() != 0) {
    Serial.println("Error in I2C transmission");
    return 0;  // Return 0 if transmission fails
  }

  i2c.requestFrom(AS5600_ADDR, 2);  // Request 2 bytes from AS5600
  if (i2c.available() == 2) {
    uint16_t highByte = i2c.read();
    uint16_t lowByte = i2c.read();
    return (highByte << 8) | lowByte;  // Combine bytes into one 12-bit value
  } else {
    Serial.println("Failed to receive data from encoder");
    return 0;
  }
}

void readEncodersAndPublish() {
  // Read Encoder 1 (on I2C_1)
  uint16_t angle1 = readAS5600Angle(I2C_1);
  float degrees1 = (angle1 * 360.0) / 4096.0;

  // Read Encoder 2 (on I2C_2)
  uint16_t angle2 = readAS5600Angle(I2C_2);
  float degrees2 = (angle2 * 360.0) / 4096.0;

  // Populate the ROS message
  encoder_data[0] = degrees1;
  encoder_data[1] = degrees2;

  // Publish the angles on the ROS topic
  encoder_pub.publish(&encoder_angles);

  // Log to Serial Monitor for debugging
  Serial.print("Encoder 1: ");
  Serial.print(degrees1);
  Serial.print(" degrees, Encoder 2: ");
  Serial.print(degrees2);
  Serial.println(" degrees");
}

void loop() {
  static unsigned long lastPublishTime = 0;

  // Publish encoder data every 500ms
  if (millis() - lastPublishTime >= 500) {
    readEncodersAndPublish();
    nh.spinOnce();  // Handle ROS communication
    lastPublishTime = millis();
  }
}
